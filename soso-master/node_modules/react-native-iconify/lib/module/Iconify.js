function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { iconToHTML, iconToSVG } from '@iconify/utils';
import React, { useMemo } from 'react';
import { SvgXml } from 'react-native-svg';
export const Iconify = _ref => {
  let {
    size = 24,
    color = 'black',
    ...props
  } = _ref;
  const runtimeProps = props;
  const {
    isPluginInstalled,
    iconData
  } = runtimeProps;
  const renderData = useMemo(() => {
    if (!iconData) {
      return null;
    }
    return iconToSVG(iconData, {
      height: size
    });
  }, [size, iconData]);
  const svg = useMemo(() => {
    if (!renderData) {
      return null;
    }
    return iconToHTML(renderData.body, renderData.attributes);
  }, [renderData]);
  if (!isPluginInstalled) {
    throw new Error('Iconify: You need to install a Babel plugin before using this library. You can continue by adding the following to your babel.config.js');
  }
  if (!iconData || !renderData || !svg) {
    return null;
  }
  return /*#__PURE__*/React.createElement(SvgXml, _extends({
    xml: svg,
    height: renderData.attributes.height,
    width: renderData.attributes.width,
    color: color
  }, props));
};
export default Iconify;
//# sourceMappingURL=Iconify.js.map