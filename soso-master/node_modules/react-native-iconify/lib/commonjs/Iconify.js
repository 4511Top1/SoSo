"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Iconify = void 0;
var _utils = require("@iconify/utils");
var _react = _interopRequireWildcard(require("react"));
var _reactNativeSvg = require("react-native-svg");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Iconify = _ref => {
  let {
    size = 24,
    color = 'black',
    ...props
  } = _ref;
  const runtimeProps = props;
  const {
    isPluginInstalled,
    iconData
  } = runtimeProps;
  const renderData = (0, _react.useMemo)(() => {
    if (!iconData) {
      return null;
    }
    return (0, _utils.iconToSVG)(iconData, {
      height: size
    });
  }, [size, iconData]);
  const svg = (0, _react.useMemo)(() => {
    if (!renderData) {
      return null;
    }
    return (0, _utils.iconToHTML)(renderData.body, renderData.attributes);
  }, [renderData]);
  if (!isPluginInstalled) {
    throw new Error('Iconify: You need to install a Babel plugin before using this library. You can continue by adding the following to your babel.config.js');
  }
  if (!iconData || !renderData || !svg) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.SvgXml, _extends({
    xml: svg,
    height: renderData.attributes.height,
    width: renderData.attributes.width,
    color: color
  }, props));
};
exports.Iconify = Iconify;
var _default = Iconify;
exports.default = _default;
//# sourceMappingURL=Iconify.js.map